{"title":"Mobile Development (Android)","uid":"bcc935a25dfebbd1b850f330cfc413db","slug":"Mobile Key Note","date":"2025-08-28T07:56:00.000Z","updated":"2025-08-28T07:57:03.706Z","comments":true,"path":"api/articles/Mobile Key Note.json","keywords":null,"cover":"https://riseuplabs.com/wp-content/uploads/2021/07/mobile-application-development-guidelines-riseuplabs.jpg","content":"<h2 id=\"android-kernel-modifications\"><a class=\"markdownIt-Anchor\" href=\"#android-kernel-modifications\"></a> <strong>Android Kernel Modifications</strong></h2>\n<ul>\n<li><strong>Wakelock:</strong> Prevents CPU/screen sleep for power management.</li>\n<li><strong>Binder IPC:</strong> Efficient inter-process communication.</li>\n<li><strong>Low Memory Killer:</strong> Manages process termination in low-memory scenarios.</li>\n<li><strong>Ashmem:</strong> Anonymous shared memory for inter-process data sharing.</li>\n<li><strong>Alarm Driver:</strong> Wakes device for scheduled tasks.</li>\n<li><strong>OOM Handling:</strong> Adjusts process priority dynamically.</li>\n</ul>\n<h2 id=\"system-on-a-chip-soc\"><a class=\"markdownIt-Anchor\" href=\"#system-on-a-chip-soc\"></a> System on a Chip (SoC)</h2>\n<ul>\n<li><strong>CPU + Other Components:</strong> Uses only part of the transistors for CPU, rest for peripherals.</li>\n<li><strong>Integration:</strong> Combines CPU, GPU, NPU, DSP, Modem, etc.</li>\n<li><strong>Advantages:</strong>\n<ul>\n<li>Reduces communication overhead &amp; heat.</li>\n<li>Optimized computation and storage.</li>\n</ul>\n</li>\n<li>Disadvantages:\n<ul>\n<li>Fabrication cost</li>\n<li>Increases complexity</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"package-on-package-pop\"><a class=\"markdownIt-Anchor\" href=\"#package-on-package-pop\"></a> Package on Package (PoP)</h2>\n<ul>\n<li><strong>Concept:</strong> Stacks RAM directly on SoC.</li>\n<li><strong>Benefits:</strong>\n<ul>\n<li>Saves PCB space.</li>\n<li>Improves speed by reducing memory access time.</li>\n<li>Allows independent production of CPU and RAM.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"arm-and-thumb\"><a class=\"markdownIt-Anchor\" href=\"#arm-and-thumb\"></a> ARM and Thumb</h2>\n<ul>\n<li><strong>Why Thumb?</strong>\n<ul>\n<li>ARM uses 32-bit instructions, but not all need full 32 bits.</li>\n<li><strong>Thumb Mode:</strong> 16-bit compact instructions, improving memory usage and execution efficiency</li>\n<li><strong>Execution Optimization:</strong> A single 32-bit fetch can load <strong>two 16-bit Thumb instructions</strong>.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"biglittle-architecture\"><a class=\"markdownIt-Anchor\" href=\"#biglittle-architecture\"></a> Big.LITTLE Architecture</h2>\n<ul>\n<li><strong>Concept</strong>: ARM’s solution to combine high performance with energy efficiency by integrating both powerful (big) and efficient (LITTLE) cores</li>\n<li><strong>Big Core:</strong>\n<ul>\n<li>High power, high performance.</li>\n</ul>\n</li>\n<li><strong>LITTLE Core:</strong>\n<ul>\n<li>Lower power, optimized for energy efficiency.</li>\n</ul>\n</li>\n<li><strong>Dynamic Task Management:</strong>\n<ul>\n<li>System switches cores based on workload to optimize efficiency.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"the-activity-lifecycle\"><a class=\"markdownIt-Anchor\" href=\"#the-activity-lifecycle\"></a> <strong>The Activity Lifecycle</strong></h3>\n<table>\n<thead>\n<tr>\n<th><strong>Method</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>onCreate()</code></td>\n<td><strong>Required</strong>. The “constructor” for the component. Set up UI, initialize resources.</td>\n</tr>\n<tr>\n<td><code>onStart()</code></td>\n<td>Activity becomes <strong>visible</strong> to the user.</td>\n</tr>\n<tr>\n<td><code>onResume()</code></td>\n<td>Activity is in the <strong>foreground</strong> and interactive. Stays here until interrupted.</td>\n</tr>\n<tr>\n<td><code>onPause()</code></td>\n<td>User is <strong>leaving</strong> the Activity. Stop non-essential processes (e.g., camera preview).</td>\n</tr>\n<tr>\n<td><code>onStop()</code></td>\n<td>Activity is <strong>no longer visible</strong>. Release resources, save data to storage.</td>\n</tr>\n<tr>\n<td><code>onDestroy()</code></td>\n<td>Activity is <strong>being destroyed</strong>, either due to <strong>user exit</strong> or <strong>configuration change</strong>.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"intents\"><a class=\"markdownIt-Anchor\" href=\"#intents\"></a> Intents</h2>\n<ul>\n<li>\n<p><strong>Intent</strong>: Describes an operation (Action + Data URI) for Activity communication.</p>\n</li>\n<li>\n<p><strong>Explicit Intent</strong>: Starts a specific Activity.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = new Intent(this, SecondActivity.class);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>Implicit Intent</strong>: System resolves the best Activity.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(&quot;http://example.com&quot;));</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><code>intent-filter</code> in <code>AndroidManifest.xml</code> determines what an Activity can handle.</p>\n</li>\n</ul>\n<h2 id=\"types-of-services\"><a class=\"markdownIt-Anchor\" href=\"#types-of-services\"></a> <strong>Types of Services</strong></h2>\n<h3 id=\"bound-service\"><a class=\"markdownIt-Anchor\" href=\"#bound-service\"></a> Bound Service</h3>\n<ul>\n<li><strong>Tightly coupled</strong> with components like <code>Activity</code>.</li>\n<li><strong>Lifespan:</strong> Exists as long as a component is bound to it.</li>\n<li><strong>Use case:</strong> Media player where UI needs to control playback.</li>\n</ul>\n<h3 id=\"unbound-started-service\"><a class=\"markdownIt-Anchor\" href=\"#unbound-started-service\"></a> Unbound (Started) Service</h3>\n<ul>\n<li><strong>Loosely coupled</strong>, runs independently in the background.</li>\n<li><strong>Lifespan:</strong> Not tied to any component; runs until explicitly stopped.</li>\n<li><strong>Use case:</strong> A file download service that continues even after <code>Activity</code> exits.</li>\n</ul>\n<h3 id=\"foreground-service\"><a class=\"markdownIt-Anchor\" href=\"#foreground-service\"></a> Foreground Service</h3>\n<ul>\n<li><strong>Visible to the user</strong>, requires a persistent notification.</li>\n<li><strong>Lifespan:</strong> Runs as long as the operation is active.</li>\n<li><strong>Use case:</strong> Navigation apps, music players, fitness tracking.</li>\n</ul>\n<h3 id=\"background-service\"><a class=\"markdownIt-Anchor\" href=\"#background-service\"></a> Background Service</h3>\n<ul>\n<li><strong>Invisible to the user</strong>, performs background tasks.</li>\n<li><strong>Lifespan:</strong> Can be terminated by the system under memory pressure.</li>\n<li><strong>Use case:</strong> Syncing data, periodic background updates.</li>\n</ul>\n<h3 id=\"intentservice-deprecated\"><a class=\"markdownIt-Anchor\" href=\"#intentservice-deprecated\"></a> IntentService (Deprecated)</h3>\n<ul>\n<li><strong>Executes tasks asynchronously on a worker thread.</strong></li>\n<li><strong>Lifespan:</strong> Stops itself after completing all tasks.</li>\n<li><strong>Use case:</strong> Email sending, file uploads, one-time background tasks.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Use Case</th>\n<th>Lifespan</th>\n<th>Interaction</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Foreground Service</strong></td>\n<td>Ongoing tasks like music, fitness tracking</td>\n<td>Until stopped</td>\n<td>Can be bound</td>\n</tr>\n<tr>\n<td><strong>Background Service</strong></td>\n<td>Syncing, downloading</td>\n<td>Can be killed by system</td>\n<td>Can be bound</td>\n</tr>\n<tr>\n<td><strong>Bound Service</strong></td>\n<td>UI interaction (e.g., media player)</td>\n<td>Exists while bound</td>\n<td>Direct calls via <code>Binder</code></td>\n</tr>\n<tr>\n<td><strong>IntentService</strong> (Deprecated)</td>\n<td>One-time background tasks</td>\n<td>Stops after task</td>\n<td>Rarely bound</td>\n</tr>\n<tr>\n<td><strong>WorkManager</strong></td>\n<td>Background scheduling (sync, upload)</td>\n<td>Managed by system</td>\n<td>No direct interaction</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"service-lifecycle\"><a class=\"markdownIt-Anchor\" href=\"#service-lifecycle\"></a> Service Lifecycle</h2>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>onCreate()</code></td>\n<td>Initializes the service.</td>\n</tr>\n<tr>\n<td><code>onStartCommand()</code></td>\n<td>Called when using <code>startService()</code>.</td>\n</tr>\n<tr>\n<td><code>onBind()</code></td>\n<td>Called when using <code>bindService()</code>.</td>\n</tr>\n<tr>\n<td><code>onDestroy()</code></td>\n<td>Called when the service is stopped.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-binder-mechanism\"><a class=\"markdownIt-Anchor\" href=\"#2-binder-mechanism\"></a> <strong>2. Binder Mechanism</strong></h2>\n<h3 id=\"binder-overview\"><a class=\"markdownIt-Anchor\" href=\"#binder-overview\"></a> <strong>Binder Overview</strong></h3>\n<ul>\n<li><strong>Lightweight RPC system</strong> implemented via <strong>Linux kernel driver</strong>.</li>\n<li><strong>Marshalling &amp; Unmarshalling</strong>: Converts complex objects into primitives for transmission.</li>\n<li><strong>Thread pool management</strong>: Handles concurrent IPC requests.</li>\n</ul>\n<h2 id=\"3-messenger-protocol\"><a class=\"markdownIt-Anchor\" href=\"#3-messenger-protocol\"></a> <strong>3. Messenger Protocol</strong></h2>\n<h3 id=\"concept\"><a class=\"markdownIt-Anchor\" href=\"#concept\"></a> <strong>Concept</strong></h3>\n<ul>\n<li><strong>Messenger acts as a postman</strong> delivering messages between processes.</li>\n<li><strong>Handler &amp; Looper manage incoming messages</strong> in the destination process.</li>\n</ul>\n<h3 id=\"how-it-works\"><a class=\"markdownIt-Anchor\" href=\"#how-it-works\"></a> <strong>How It Works</strong></h3>\n<ol>\n<li><strong>Process A (Client) sends a <code>Message</code> to Process B (Service)</strong>.</li>\n<li><strong>Process B receives the <code>Message</code> via <code>Handler</code></strong>.</li>\n<li><strong>Looper processes messages sequentially</strong> in the main thread.</li>\n</ol>\n<h3 id=\"messenger-features\"><a class=\"markdownIt-Anchor\" href=\"#messenger-features\"></a> <strong>Messenger Features</strong></h3>\n<ul>\n<li><strong>Uses a single-threaded message queue</strong>.</li>\n<li><strong>Data is passed via <code>Message</code> objects, not method calls</strong>.</li>\n<li><strong>Bi-directional communication possible using <code>replyTo</code></strong>.</li>\n</ul>\n<hr />\n<h2 id=\"4-messenger-vs-aidl\"><a class=\"markdownIt-Anchor\" href=\"#4-messenger-vs-aidl\"></a> <strong>4. Messenger vs. AIDL</strong></h2>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Messenger</th>\n<th>AIDL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Best for</strong></td>\n<td>Simple IPC</td>\n<td>Complex IPC</td>\n</tr>\n<tr>\n<td><strong>Threading</strong></td>\n<td>Single-threaded</td>\n<td>Multi-threaded</td>\n</tr>\n<tr>\n<td><strong>Data Types</strong></td>\n<td>Primitive, <code>Bundle</code></td>\n<td>Supports <code>Parcelable</code></td>\n</tr>\n<tr>\n<td><strong>Bi-directional</strong></td>\n<td>Needs extra <code>Messenger</code></td>\n<td>Native callback support</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><strong>Messenger</strong>: Simple message-based IPC, best for <strong>one-way</strong> interactions.</li>\n<li><strong>AIDL</strong>: Supports <strong>complex APIs</strong>, <strong>high performance</strong>, and <strong>custom objects</strong>.</li>\n</ul>\n<hr />\n<h2 id=\"5-aidl-android-interface-definition-language\"><a class=\"markdownIt-Anchor\" href=\"#5-aidl-android-interface-definition-language\"></a> <strong>5. AIDL (Android Interface Definition Language)</strong></h2>\n<h3 id=\"why-aidl\"><a class=\"markdownIt-Anchor\" href=\"#why-aidl\"></a> <strong>Why AIDL?</strong></h3>\n<ul>\n<li><strong>Defines remote interfaces for complex IPC</strong>.</li>\n<li><strong>Automatically generates Proxy &amp; Stub classes</strong> to simplify communication.</li>\n<li><strong>Supports multi-threading</strong>.</li>\n</ul>\n<h3 id=\"aidl-workflow\"><a class=\"markdownIt-Anchor\" href=\"#aidl-workflow\"></a> <strong>AIDL Workflow</strong></h3>\n<ol>\n<li><strong>Define AIDL interface</strong> (<code>.aidl</code> file).</li>\n<li><strong>AIDL compiler generates Java code</strong> (Proxy &amp; Stub).</li>\n<li><strong>Server implements <code>Stub</code> and registers service</strong>.</li>\n<li><strong>Client retrieves service via <code>bindService()</code></strong>.</li>\n</ol>\n<h3 id=\"aidl-features\"><a class=\"markdownIt-Anchor\" href=\"#aidl-features\"></a> <strong>AIDL Features</strong></h3>\n<ul>\n<li><strong>Supports method calls across processes</strong>.</li>\n<li><strong>Allows callbacks using <code>in</code>, <code>out</code>, <code>inout</code> parameters</strong>.</li>\n<li><strong>Uses Parcelable for complex objects</strong>.</li>\n</ul>\n<h2 id=\"6-parcelable-efficient-ipc-object-serialization\"><a class=\"markdownIt-Anchor\" href=\"#6-parcelable-efficient-ipc-object-serialization\"></a> <strong>6. Parcelable (Efficient IPC Object Serialization)</strong></h2>\n<h3 id=\"why-parcelable\"><a class=\"markdownIt-Anchor\" href=\"#why-parcelable\"></a> <strong>Why Parcelable?</strong></h3>\n<ul>\n<li><strong>Faster than <code>Serializable</code></strong>, optimized for Android.</li>\n<li><strong>Explicit serialization logic</strong> avoids reflection overhead.</li>\n<li><strong>Ideal for IPC where performance matters</strong>.</li>\n</ul>\n<h3 id=\"parcelable-vs-serializable\"><a class=\"markdownIt-Anchor\" href=\"#parcelable-vs-serializable\"></a> <strong>Parcelable vs. Serializable</strong></h3>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>Parcelable</th>\n<th>Serializable</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Speed</strong></td>\n<td>Faster</td>\n<td>Slower (uses reflection)</td>\n</tr>\n<tr>\n<td><strong>Flexibility</strong></td>\n<td>Requires manual implementation</td>\n<td>Automatic</td>\n</tr>\n<tr>\n<td><strong>Use Case</strong></td>\n<td>Android IPC (<code>Intent</code>, <code>AIDL</code>)</td>\n<td>General Java serialization</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"storage-in-android\"><a class=\"markdownIt-Anchor\" href=\"#storage-in-android\"></a> 📂Storage in Android</h2>\n<h3 id=\"storage-principles\"><a class=\"markdownIt-Anchor\" href=\"#storage-principles\"></a> 🔹 Storage Principles</h3>\n<ul>\n<li><strong>App specific requirements</strong>\n<ul>\n<li>Store files that are meant for our use only</li>\n<li>Store files that we intend to share with other apps</li>\n<li>Store private, primitive data</li>\n<li>Store private, structured data</li>\n</ul>\n</li>\n<li><strong>Mobile storage principles</strong>\n<ul>\n<li>Efficiency and sharing vs privacy and security\n<ul>\n<li>Limited storage capability</li>\n<li>Highly personal information\n<ul>\n<li>Contacts, messages, activity</li>\n<li>Probably do not want other apps to “just” be able to access it</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Media\n<ul>\n<li>Images, videos, music</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"logical-storage-types\"><a class=\"markdownIt-Anchor\" href=\"#logical-storage-types\"></a> 🔹 Logical Storage Types</h3>\n<ol>\n<li>\n<p><strong>Internal Storage</strong>:</p>\n<ul>\n<li>Private to the app.</li>\n<li>Kernel-enforced security.</li>\n<li>Deleted upon app uninstallation.</li>\n<li>Includes SharedPreferences, SQLite, and cache files.</li>\n</ul>\n</li>\n<li>\n<p><strong>External Storage</strong>:</p>\n<ul>\n<li>Larger space, possibly removable (e.g., SD card).</li>\n<li>Public access; other apps can read/write (requires permission).</li>\n<li>Scoped storage (Android 10+) limits app access to media collections.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"file-based-abstractions\"><a class=\"markdownIt-Anchor\" href=\"#file-based-abstractions\"></a> 🔹File-based abstractions</h3>\n<ol>\n<li>\n<p><strong>Shared Preferences</strong>:</p>\n<ul>\n<li>Key-value storage for primitive data (strings, integers).</li>\n<li>Not suitable for persistent large data.</li>\n</ul>\n</li>\n<li>\n<p><strong>Databases in Android</strong></p>\n<ul>\n<li><strong>SQLite</strong>: A self-contained SQL database for structured data.</li>\n<li><strong>SQLiteOpenHelper</strong>:\n<ul>\n<li>Manages database creation and upgrades.</li>\n<li>Provides methods for readable and writable database access.</li>\n</ul>\n</li>\n<li><strong>Cursors</strong>:\n<ul>\n<li>Query results are returned as a <code>Cursor</code> object.</li>\n<li><code>moveToFirst()</code>, <code>moveToNext()</code> allow navigation.</li>\n<li><code>getString(columnIndex)</code>, <code>getInt(columnIndex)</code> for data retrieval.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>File-based storage</strong></p>\n</li>\n</ol>\n<hr />\n<h2 id=\"mvvm-architecture\"><a class=\"markdownIt-Anchor\" href=\"#mvvm-architecture\"></a> 🎭 MVVM Architecture</h2>\n<h3 id=\"key-components\"><a class=\"markdownIt-Anchor\" href=\"#key-components\"></a> 🔹 Key Components</h3>\n<ul>\n<li><strong>Model</strong>: Database (Room).</li>\n<li><strong>ViewModel</strong>: Holds UI-related data.</li>\n<li><strong>View</strong>: Activity/Fragment displaying data.</li>\n</ul>\n<h3 id=\"benefits\"><a class=\"markdownIt-Anchor\" href=\"#benefits\"></a> 🔹 Benefits</h3>\n<ul>\n<li>Separation of concerns.</li>\n<li>Lifecycle-aware architecture.</li>\n<li>Uses <code>LiveData</code> for reactive UI updates.</li>\n</ul>\n<h2 id=\"content-providers\"><a class=\"markdownIt-Anchor\" href=\"#content-providers\"></a> 🔄 Content Providers</h2>\n<h3 id=\"purpose\"><a class=\"markdownIt-Anchor\" href=\"#purpose\"></a> 🔹 Purpose</h3>\n<ul>\n<li>Allows sharing structured data between apps.</li>\n<li>Provides a database-like interface using <strong>URIs</strong>.</li>\n<li>Enables <strong>Inter-Process Communication (IPC)</strong>.</li>\n</ul>\n<h3 id=\"system-content-providers\"><a class=\"markdownIt-Anchor\" href=\"#system-content-providers\"></a> 🔹 System Content Providers</h3>\n<ul>\n<li><strong>Browser</strong> (history, bookmarks).</li>\n<li><strong>Call log</strong> (phone records).</li>\n<li><strong>Contacts</strong> (address book).</li>\n<li><strong>MediaStore</strong> (images, videos, music).</li>\n</ul>\n<h2 id=\"what-is-a-broadcast\"><a class=\"markdownIt-Anchor\" href=\"#what-is-a-broadcast\"></a> What is a Broadcast?</h2>\n<ul>\n<li><strong>A messaging system</strong> used by Android to notify applications about <strong>system-wide or app-specific events</strong>.</li>\n<li><strong>Sent as Intents</strong> and can be:\n<ul>\n<li><strong>Implicit</strong> (delivered to any app that has registered for it).</li>\n<li><strong>Explicit</strong> (targeted at a specific component).</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-purpose-of-permissions\"><a class=\"markdownIt-Anchor\" href=\"#1-purpose-of-permissions\"></a> <strong>1. Purpose of Permissions</strong></h2>\n<ul>\n<li>Protect user privacy and system security.</li>\n<li>Restrict access to sensitive data (e.g., contacts, location) and actions (e.g., sending SMS, recording audio).</li>\n<li>Apps have <strong>no access by default</strong> unless granted by the user or system.</li>\n</ul>\n<h2 id=\"6-component-level-permissions\"><a class=\"markdownIt-Anchor\" href=\"#6-component-level-permissions\"></a> <strong>6. Component-Level Permissions</strong></h2>\n<h3 id=\"1-restricting-component-access\"><a class=\"markdownIt-Anchor\" href=\"#1-restricting-component-access\"></a> <strong>(1) Restricting Component Access</strong></h3>\n<ul>\n<li>Permissions can be applied to <strong>Activity, Service, ContentProvider, and BroadcastReceiver</strong>.</li>\n<li>Example restrictions:\n<ul>\n<li><strong>Activity</strong>: Limits which apps can start it.</li>\n<li><strong>Service</strong>: Controls which apps can bind/start/stop it.</li>\n<li><strong>ContentProvider</strong>: Controls read/write access.</li>\n<li><strong>BroadcastReceiver</strong>: Prevents unauthorized apps from listening.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-custom-permissions\"><a class=\"markdownIt-Anchor\" href=\"#2-custom-permissions\"></a> <strong>(2) Custom Permissions</strong></h3>\n<ul>\n<li>Apps can define their own permissions (<code>&lt;permission&gt;</code>).</li>\n<li><strong>Not recommended unless absolutely necessary</strong> (e.g., middleware services).</li>\n<li>Use <strong><code>signature</code> protection level</strong> for internal API access.</li>\n</ul>\n<h2 id=\"2-battery-consumption-analysis\"><a class=\"markdownIt-Anchor\" href=\"#2-battery-consumption-analysis\"></a> <strong>2. Battery Consumption Analysis</strong></h2>\n<h3 id=\"dynamic-state-tracking\"><a class=\"markdownIt-Anchor\" href=\"#dynamic-state-tracking\"></a> <strong>Dynamic State Tracking</strong></h3>\n<ul>\n<li><strong>Wi-Fi Status</strong>: Tracks active/inactive states.</li>\n<li><strong>Screen Brightness</strong>: Monitors brightness levels.</li>\n<li><strong>BatteryStats Service</strong>: Records and analyzes power usage at state transitions.</li>\n</ul>\n<h3 id=\"cpu-utilization-tracking\"><a class=\"markdownIt-Anchor\" href=\"#cpu-utilization-tracking\"></a> <strong>CPU Utilization Tracking</strong></h3>\n<ul>\n<li><strong>Monitors app CPU runtime</strong> to measure power consumption accurately.</li>\n</ul>\n<h2 id=\"3-android-power-management-states\"><a class=\"markdownIt-Anchor\" href=\"#3-android-power-management-states\"></a> <strong>3. Android Power Management States</strong></h2>\n<table>\n<thead>\n<tr>\n<th><strong>State</strong></th>\n<th><strong>Description</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>G0 (Active)</strong></td>\n<td>Device fully operational.</td>\n</tr>\n<tr>\n<td><strong>G1 (Sleep Modes)</strong></td>\n<td>Multiple sleep levels for power conservation.</td>\n</tr>\n<tr>\n<td><strong>S1</strong></td>\n<td>CPU idle but powered.</td>\n</tr>\n<tr>\n<td><strong>S2</strong></td>\n<td>CPU off, cache cleared.</td>\n</tr>\n<tr>\n<td><strong>S3 (Standby)</strong></td>\n<td>RAM remains powered for fast wake-up.</td>\n</tr>\n<tr>\n<td><strong>S4 (Hibernate)</strong></td>\n<td>System state saved to disk, RAM powered off.</td>\n</tr>\n<tr>\n<td><strong>G2 (Soft Off)</strong></td>\n<td>Minimal power consumption.</td>\n</tr>\n<tr>\n<td><strong>G3 (Mechanical Off)</strong></td>\n<td>Full shutdown, no power.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"wake-locks\"><a class=\"markdownIt-Anchor\" href=\"#wake-locks\"></a> Wake Locks</h2>\n<ul>\n<li><strong>Prevents CPU from sleeping when necessary.</strong></li>\n<li>Different types control screen and CPU wake-up behavior.</li>\n<li><strong>Efficient use is crucial to prevent unnecessary power drain.</strong></li>\n</ul>\n<h2 id=\"5-android-battery-optimization-features\"><a class=\"markdownIt-Anchor\" href=\"#5-android-battery-optimization-features\"></a> <strong>5. Android Battery Optimization Features</strong></h2>\n<h3 id=\"app-standby\"><a class=\"markdownIt-Anchor\" href=\"#app-standby\"></a> <strong>App Standby</strong></h3>\n<ul>\n<li><strong>Triggers when an app is inactive</strong> (no foreground tasks, no launch history).</li>\n<li><strong>Restrictions:</strong>\n<ul>\n<li>No background network access (except a daily maintenance window).</li>\n<li>Suspended background jobs.</li>\n<li>Wake locks &amp; alarms allowed for brief tasks.</li>\n</ul>\n</li>\n<li><strong>Exit conditions:</strong> User opens the app or connects to power.</li>\n</ul>\n<h3 id=\"doze-mode\"><a class=\"markdownIt-Anchor\" href=\"#doze-mode\"></a> <strong>Doze Mode</strong></h3>\n<ul>\n<li><strong>Triggers when the device is idle (screen off, stationary, battery-powered).</strong></li>\n<li><strong>Restrictions:</strong>\n<ul>\n<li>No network access.</li>\n<li>CPU tasks halted.</li>\n<li>Wake locks ignored.</li>\n<li>Only high-priority notifications allowed.</li>\n</ul>\n</li>\n<li><strong>Exit conditions:</strong> User interaction, motion detection, alarm events.</li>\n</ul>\n<h2 id=\"6-firebase-cloud-messaging-fcm-battery-optimization\"><a class=\"markdownIt-Anchor\" href=\"#6-firebase-cloud-messaging-fcm-battery-optimization\"></a> <strong>6. Firebase Cloud Messaging (FCM) &amp; Battery Optimization</strong></h2>\n<ul>\n<li><strong>Efficient Messaging</strong>: Optimized server-device communication.</li>\n<li><strong>High-Priority Messages</strong>: Bypass Doze &amp; App Standby.</li>\n<li><strong>Smart Delivery</strong>: Reduces battery drain via network batching.</li>\n<li><strong>Battery-Friendly</strong>: Limits device wake-ups.</li>\n</ul>\n<h2 id=\"7-sustained-performance-mode-spm\"><a class=\"markdownIt-Anchor\" href=\"#7-sustained-performance-mode-spm\"></a> <strong>7. Sustained Performance Mode (SPM)</strong></h2>\n<ul>\n<li><strong>Prevents thermal throttling in high-performance applications (games, VR).</strong></li>\n<li><strong>Ensures stable performance over long periods.</strong></li>\n<li><strong>Deactivates automatically when the app moves to the background to conserve power.</strong></li>\n</ul>\n<h1 id=\"revision\"><a class=\"markdownIt-Anchor\" href=\"#revision\"></a> Revision</h1>\n<h3 id=\"difference-between-a-started-service-and-a-bound-service\"><a class=\"markdownIt-Anchor\" href=\"#difference-between-a-started-service-and-a-bound-service\"></a> Difference Between a Started Service and a Bound Service</h3>\n<ul>\n<li><strong>Started Service</strong>: Launched with <code>startService()</code>, runs in the background until explicitly stopped (e.g., file downloads).</li>\n<li><strong>Bound Service</strong>: Initiated with <code>bindService()</code>, allows two-way communication with components like activities via a client-server interface.</li>\n</ul>\n<h4 id=\"lifecycles\"><a class=\"markdownIt-Anchor\" href=\"#lifecycles\"></a> Lifecycles</h4>\n<ul>\n<li><strong>Started Service</strong>:\n<ul>\n<li>Lifecycle: <code>onCreate()</code> → <code>onStartCommand()</code> → Runs independently → Ends with <code>stopSelf()</code> or <code>stopService()</code> → <code>onDestroy()</code>.</li>\n</ul>\n</li>\n<li><strong>Bound Service</strong>:\n<ul>\n<li>Lifecycle: <code>onCreate()</code> → <code>onBind()</code> → Active while clients are bound → <code>onUnbind()</code> (when last client disconnects) → <code>onDestroy()</code>.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"communication-mechanisms-with-activities\"><a class=\"markdownIt-Anchor\" href=\"#communication-mechanisms-with-activities\"></a> Communication Mechanisms with Activities</h4>\n<ul>\n<li><strong>Started Service</strong>: Uses <strong>Intents, Handlers, or Broadcast Manager</strong> for communication.</li>\n<li><strong>Bound Service</strong>: Provides a direct interface using an <strong>IBinder object</strong>, allowing activities to call its methods directly.</li>\n</ul>\n<h4 id=\"appropriate-scenarios\"><a class=\"markdownIt-Anchor\" href=\"#appropriate-scenarios\"></a> Appropriate Scenarios</h4>\n<ul>\n<li><strong>Started Service</strong>: Suitable for independent tasks like <strong>data processing</strong> or <strong>file downloads</strong>.</li>\n<li><strong>Bound Service</strong>: Ideal for tasks requiring interaction with the UI, like <strong>music players</strong> or <strong>GPS tracking</strong>.</li>\n</ul>\n<h4 id=\"ensuring-long-running-tasks-persist\"><a class=\"markdownIt-Anchor\" href=\"#ensuring-long-running-tasks-persist\"></a> Ensuring Long-Running Tasks Persist</h4>\n<ul>\n<li>Use a <strong>Foreground Service</strong> by calling <code>startForeground()</code> and associating a <strong>notification</strong> to keep the service active.</li>\n</ul>\n<h3 id=\"two-golden-rules-of-the-single-thread-model-in-android-ui-framework\"><a class=\"markdownIt-Anchor\" href=\"#two-golden-rules-of-the-single-thread-model-in-android-ui-framework\"></a> <strong>Two Golden Rules of the Single Thread Model in Android UI Framework</strong></h3>\n<ol>\n<li><strong>Do not block the UI thread.</strong>\n<ul>\n<li>The UI thread should always remain responsive; long-running operations (e.g., network calls, database queries) should be performed on background threads.</li>\n<li><strong>Example:</strong> Performing a network request using <code>AsyncTask</code> or Kotlin coroutines (<code>Dispatchers.IO</code>) instead of executing it directly on the UI thread.</li>\n</ul>\n</li>\n<li><strong>Do not access the UI from a background thread.</strong>\n<ul>\n<li>UI components must be updated only from the UI thread to avoid crashes (<code>CalledFromWrongThreadException</code>).</li>\n<li>Use mechanisms like <strong><code>Handler</code></strong>, <strong><code>runOnUiThread()</code></strong>, or <strong><code>LiveData</code></strong> to safely update UI from background threads.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"does-android-benefit-from-linuxs-virtual-memory-capabilities\"><a class=\"markdownIt-Anchor\" href=\"#does-android-benefit-from-linuxs-virtual-memory-capabilities\"></a> <strong>Does Android Benefit from Linux’s Virtual Memory Capabilities?</strong></h3>\n<h4 id=\"answer-yes-android-still-benefits-from-linuxs-virtual-memory-capabilities\"><a class=\"markdownIt-Anchor\" href=\"#answer-yes-android-still-benefits-from-linuxs-virtual-memory-capabilities\"></a> <strong>Answer: Yes, Android still benefits from Linux’s virtual memory capabilities.</strong></h4>\n<h5 id=\"justification\"><a class=\"markdownIt-Anchor\" href=\"#justification\"></a> <strong>Justification:</strong></h5>\n<ol>\n<li>\n<p><strong>Memory Protection and Isolation</strong></p>\n<ul>\n<li>Each Android application runs in its own process with a unique user ID, ensuring <strong>process isolation</strong> and preventing unauthorized access to another app’s memory.</li>\n</ul>\n</li>\n<li>\n<p><strong>Paging Mechanism</strong></p>\n<ul>\n<li>Even though Android does not typically use swapping, it still benefits from Linux’s <strong>demand paging</strong>, allowing apps to <strong>load only the necessary memory pages</strong> into RAM, reducing initial memory footprint.</li>\n</ul>\n</li>\n<li>\n<p><strong>Kernel-Level Memory Management</strong></p>\n<ul>\n<li>Android leverages <strong>memory overcommitment and page sharing</strong>, where read-only system libraries are shared among processes using shared memory pages, optimizing RAM usage.</li>\n</ul>\n</li>\n<li>\n<p><strong>OOM (Out of Memory) Killer</strong></p>\n<ul>\n<li>Instead of swapping, Android uses the <strong>Out of Memory (OOM) killer</strong>, a Linux kernel feature that selectively terminates background or less important processes to free up RAM.</li>\n</ul>\n</li>\n<li>\n<p><strong>ZRAM Compression</strong></p>\n<ul>\n<li>Many Android devices use <strong>ZRAM (compressed RAM swap)</strong>, where a portion of RAM is used as a compressed swap space, effectively extending usable memory while avoiding the high I/O cost of disk-based swapping.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"conclusion\"><a class=\"markdownIt-Anchor\" href=\"#conclusion\"></a> <strong>Conclusion:</strong></h3>\n<p>Even without traditional disk-based swapping, Android benefits from Linux’s virtual memory features such as <strong>paging, memory protection, shared libraries, and ZRAM compression</strong>, ensuring efficient memory management and system stability.</p>\n<h3 id=\"battery-life-enhancement-in-android\"><a class=\"markdownIt-Anchor\" href=\"#battery-life-enhancement-in-android\"></a> Battery Life Enhancement in Android</h3>\n<ul>\n<li><strong>App Standby</strong>:\n<ul>\n<li>defer background activity for apps with no recent user interaction.</li>\n</ul>\n</li>\n<li><strong>Doze</strong>:\n<ul>\n<li>deep sleep if user has not actively used the device for extended periods of time</li>\n</ul>\n</li>\n<li><strong>Exemptions</strong>:\n<ul>\n<li>system apps and cloud messaging services preloaded on phone are exempted from App Standby &amp; Doze.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-main-components\"><a class=\"markdownIt-Anchor\" href=\"#4-main-components\"></a> 4 Main Components</h3>\n<ul>\n<li><strong>Activities</strong>\n<ul>\n<li>UI components</li>\n</ul>\n</li>\n<li><strong>Services</strong>\n<ul>\n<li>Mechanism for doing something long-running in the background(c.f. front-end/ back-end)</li>\n</ul>\n</li>\n<li><strong>Broadcast Receivers</strong>\n<ul>\n<li>Respond to broadcast messages from the OS/other apps</li>\n</ul>\n</li>\n<li><strong>Content Providers</strong>\n<ul>\n<li>Make use of data from other apps</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"android-operation-system-specific-modifications\"><a class=\"markdownIt-Anchor\" href=\"#android-operation-system-specific-modifications\"></a> Android Operation System - specific modifications</h3>\n<ul>\n<li>wake locks</li>\n<li>Binder IPC</li>\n<li>Low memory killer</li>\n</ul>\n","feature":false,"text":" Android Kernel Modifications Wakelock: Prevents CPU/screen sleep for power mana...","permalink":"/post/Mobile Key Note","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"Notes","slug":"Notes","count":11,"path":"api/categories/Notes.json"}],"tags":[{"name":"Mobile","slug":"Mobile","count":2,"path":"api/tags/Mobile.json"},{"name":"Android","slug":"Android","count":2,"path":"api/tags/Android.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#android-kernel-modifications\"><span class=\"toc-text\"> Android Kernel Modifications</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#system-on-a-chip-soc\"><span class=\"toc-text\"> System on a Chip (SoC)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#package-on-package-pop\"><span class=\"toc-text\"> Package on Package (PoP)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#arm-and-thumb\"><span class=\"toc-text\"> ARM and Thumb</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#biglittle-architecture\"><span class=\"toc-text\"> Big.LITTLE Architecture</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#the-activity-lifecycle\"><span class=\"toc-text\"> The Activity Lifecycle</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#intents\"><span class=\"toc-text\"> Intents</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#types-of-services\"><span class=\"toc-text\"> Types of Services</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#bound-service\"><span class=\"toc-text\"> Bound Service</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#unbound-started-service\"><span class=\"toc-text\"> Unbound (Started) Service</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#foreground-service\"><span class=\"toc-text\"> Foreground Service</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#background-service\"><span class=\"toc-text\"> Background Service</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#intentservice-deprecated\"><span class=\"toc-text\"> IntentService (Deprecated)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#service-lifecycle\"><span class=\"toc-text\"> Service Lifecycle</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-binder-mechanism\"><span class=\"toc-text\"> 2. Binder Mechanism</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#binder-overview\"><span class=\"toc-text\"> Binder Overview</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-messenger-protocol\"><span class=\"toc-text\"> 3. Messenger Protocol</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#concept\"><span class=\"toc-text\"> Concept</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#how-it-works\"><span class=\"toc-text\"> How It Works</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#messenger-features\"><span class=\"toc-text\"> Messenger Features</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-messenger-vs-aidl\"><span class=\"toc-text\"> 4. Messenger vs. AIDL</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-aidl-android-interface-definition-language\"><span class=\"toc-text\"> 5. AIDL (Android Interface Definition Language)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#why-aidl\"><span class=\"toc-text\"> Why AIDL?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#aidl-workflow\"><span class=\"toc-text\"> AIDL Workflow</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#aidl-features\"><span class=\"toc-text\"> AIDL Features</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-parcelable-efficient-ipc-object-serialization\"><span class=\"toc-text\"> 6. Parcelable (Efficient IPC Object Serialization)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#why-parcelable\"><span class=\"toc-text\"> Why Parcelable?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#parcelable-vs-serializable\"><span class=\"toc-text\"> Parcelable vs. Serializable</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#storage-in-android\"><span class=\"toc-text\"> 📂Storage in Android</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#storage-principles\"><span class=\"toc-text\"> 🔹 Storage Principles</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#logical-storage-types\"><span class=\"toc-text\"> 🔹 Logical Storage Types</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#file-based-abstractions\"><span class=\"toc-text\"> 🔹File-based abstractions</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#mvvm-architecture\"><span class=\"toc-text\"> 🎭 MVVM Architecture</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#key-components\"><span class=\"toc-text\"> 🔹 Key Components</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#benefits\"><span class=\"toc-text\"> 🔹 Benefits</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#content-providers\"><span class=\"toc-text\"> 🔄 Content Providers</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#purpose\"><span class=\"toc-text\"> 🔹 Purpose</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#system-content-providers\"><span class=\"toc-text\"> 🔹 System Content Providers</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#what-is-a-broadcast\"><span class=\"toc-text\"> What is a Broadcast?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-purpose-of-permissions\"><span class=\"toc-text\"> 1. Purpose of Permissions</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-component-level-permissions\"><span class=\"toc-text\"> 6. Component-Level Permissions</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-restricting-component-access\"><span class=\"toc-text\"> (1) Restricting Component Access</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-custom-permissions\"><span class=\"toc-text\"> (2) Custom Permissions</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-battery-consumption-analysis\"><span class=\"toc-text\"> 2. Battery Consumption Analysis</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#dynamic-state-tracking\"><span class=\"toc-text\"> Dynamic State Tracking</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#cpu-utilization-tracking\"><span class=\"toc-text\"> CPU Utilization Tracking</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-android-power-management-states\"><span class=\"toc-text\"> 3. Android Power Management States</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wake-locks\"><span class=\"toc-text\"> Wake Locks</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-android-battery-optimization-features\"><span class=\"toc-text\"> 5. Android Battery Optimization Features</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#app-standby\"><span class=\"toc-text\"> App Standby</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#doze-mode\"><span class=\"toc-text\"> Doze Mode</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-firebase-cloud-messaging-fcm-battery-optimization\"><span class=\"toc-text\"> 6. Firebase Cloud Messaging (FCM) &amp; Battery Optimization</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-sustained-performance-mode-spm\"><span class=\"toc-text\"> 7. Sustained Performance Mode (SPM)</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#revision\"><span class=\"toc-text\"> Revision</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#difference-between-a-started-service-and-a-bound-service\"><span class=\"toc-text\"> Difference Between a Started Service and a Bound Service</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#lifecycles\"><span class=\"toc-text\"> Lifecycles</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#communication-mechanisms-with-activities\"><span class=\"toc-text\"> Communication Mechanisms with Activities</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#appropriate-scenarios\"><span class=\"toc-text\"> Appropriate Scenarios</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ensuring-long-running-tasks-persist\"><span class=\"toc-text\"> Ensuring Long-Running Tasks Persist</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#two-golden-rules-of-the-single-thread-model-in-android-ui-framework\"><span class=\"toc-text\"> Two Golden Rules of the Single Thread Model in Android UI Framework</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#does-android-benefit-from-linuxs-virtual-memory-capabilities\"><span class=\"toc-text\"> Does Android Benefit from Linux’s Virtual Memory Capabilities?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#answer-yes-android-still-benefits-from-linuxs-virtual-memory-capabilities\"><span class=\"toc-text\"> Answer: Yes, Android still benefits from Linux’s virtual memory capabilities.</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#justification\"><span class=\"toc-text\"> Justification:</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#conclusion\"><span class=\"toc-text\"> Conclusion:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#battery-life-enhancement-in-android\"><span class=\"toc-text\"> Battery Life Enhancement in Android</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-main-components\"><span class=\"toc-text\"> 4 Main Components</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#android-operation-system-specific-modifications\"><span class=\"toc-text\"> Android Operation System - specific modifications</span></a></li></ol></li></ol>","author":{"name":"Huaji1hao","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/101538759?s=96&v=4","link":"/","description":"Run, don't walk. <br />Either running for food, or running from being food.","socials":{"github":"https://github.com/huaji1hao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Mobile Development Exam","uid":"31190dc1cbfcc752001985338f19d05d","slug":"Android Exams","date":"2025-08-28T07:57:00.000Z","updated":"2025-08-28T07:58:39.560Z","comments":true,"path":"api/articles/Android Exams.json","keywords":null,"cover":"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTnNLPX_GzBtzUzSO2x5I9XDxbPk3TC9w1T8w&s","text":" Handling UI State Preservation in Android In Android, activities may be destroy...","permalink":"/post/Android Exams","photos":[],"count_time":{"symbolsCount":"33k","symbolsTime":"30 mins."},"categories":[{"name":"Notes","slug":"Notes","count":11,"path":"api/categories/Notes.json"}],"tags":[{"name":"Mobile","slug":"Mobile","count":2,"path":"api/tags/Mobile.json"},{"name":"Android","slug":"Android","count":2,"path":"api/tags/Android.json"}],"author":{"name":"Huaji1hao","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/101538759?s=96&v=4","link":"/","description":"Run, don't walk. <br />Either running for food, or running from being food.","socials":{"github":"https://github.com/huaji1hao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{"title":"High Output Management Reading Notes","uid":"0f33ba01d60d1829677c62e2b86ee042","slug":"High Output Management Reading Notes","date":"2024-10-27T16:41:45.000Z","updated":"2025-08-28T08:07:50.374Z","comments":true,"path":"api/articles/High Output Management Reading Notes.json","keywords":null,"cover":"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ-CGwwHplYLBhn-ifq_d8OslkH8sr_EQBKyA&s","text":" High Output Management Reading Notes Introduction Motto You need to develop a h...","permalink":"/post/High Output Management Reading Notes","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"Notes","slug":"Notes","count":11,"path":"api/categories/Notes.json"}],"tags":[{"name":"Management","slug":"Management","count":1,"path":"api/tags/Management.json"}],"author":{"name":"Huaji1hao","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/101538759?s=96&v=4","link":"/","description":"Run, don't walk. <br />Either running for food, or running from being food.","socials":{"github":"https://github.com/huaji1hao","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}